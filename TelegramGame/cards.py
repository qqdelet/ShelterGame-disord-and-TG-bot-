import json
import random
from telebot import types

class CardManager:
    def __init__(self, bot):
        self.bot = bot
        self.cards_data = self.load_cards()

    def load_cards(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ cards.json."""
        with open("cards.json", "r", encoding="utf-8") as f:
            return json.load(f)

    def send_job_selection(self, chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        job_cards = list(self.cards_data['job_car'])
        random.shuffle(job_cards)
        chosen_jobs = job_cards[:3]  # –í—ã–±–∏—Ä–∞–µ–º —Ç—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏

        markup = types.InlineKeyboardMarkup()
        for job in chosen_jobs:
            markup.add(types.InlineKeyboardButton(job, callback_data=f"job_{job}"))

        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:", reply_markup=markup)

    def handle_job_selection(self, call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏."""
        chosen_job = call.data.split("_")[1]
        self.bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {chosen_job}")
        self.bot.send_message(call.message.chat.id, f"–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: {chosen_job}")

    def distribute_cards(self, chat_id, participants, send_special_cards=False):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
        if (
            len(participants) > len(self.cards_data['heals_cards']) or
            len(participants) > len(self.cards_data['age_cards']) or
            len(participants) > len(self.cards_data['job_car']) or
            len(participants) > len(self.cards_data['baggage_cards']) or
            len(participants) > len(self.cards_data['hobby_cards']) or
            len(participants) * 2 > len(self.cards_data['fact_cards'])
        ):
            self.bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã
        heal_cards = list(self.cards_data['heals_cards'].keys())
        random.shuffle(heal_cards)

        age_cards = list(self.cards_data['age_cards'])
        random.shuffle(age_cards)

        job_cards = list(self.cards_data['job_car'])
        random.shuffle(job_cards)

        baggage_cards = list(self.cards_data['baggage_cards'])
        random.shuffle(baggage_cards)

        hobby_cards = list(self.cards_data['hobby_cards'])
        random.shuffle(hobby_cards)

        fact_cards = list(self.cards_data['fact_cards'])
        random.shuffle(fact_cards)

        # –†–∞–±–æ—Ç–∞ —Å –∏–≥—Ä–æ–≤—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º (game_mode_card)
        if isinstance(self.cards_data['game_mode_card'], list):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞
            game_mode_card = random.choice(self.cards_data['game_mode_card'])
            sent_message = self.bot.send_message(chat_id, f"–°—Ü–µ–Ω–∞—Ä–∏–π –∏–≥—Ä—ã: {game_mode_card}")
            
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.pin_chat_message(chat_id, sent_message.message_id)
        else:
            self.bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–≥—Ä—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")


        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
        special_cards = list(self.cards_data['special_cards'])
        random.shuffle(special_cards)

        for i, participant in enumerate(participants):
            if i >= len(heal_cards):  # –ï—Å–ª–∏ –∫–∞—Ä—Ç –º–µ–Ω—å—à–µ, —á–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                break

            # –†–∞–∑–¥–∞—á–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
            heal_card = heal_cards.pop()
            age_card = age_cards.pop()
            job_card = job_cards.pop()
            baggage_card = baggage_cards.pop()
            hobby_card = hobby_cards.pop()
            fact_card_1 = fact_cards.pop()  # –ü–µ—Ä–≤—ã–π —Ñ–∞–∫—Ç
            fact_card_2 = fact_cards.pop()  # –í—Ç–æ—Ä–æ–π —Ñ–∞–∫—Ç
            special_card = special_cards.pop() if send_special_cards else None  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–µ—Ü –∫–∞—Ä—Ç—É

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º
                self.bot.send_message(participant, f"üíâ –ó–¥–æ—Ä–æ–≤—å–µ:\n{heal_card} - {self.cards_data['heals_cards'][heal_card]}")
                self.bot.send_message(participant, f"üéÇ –í–æ–∑—Ä–∞—Å—Ç:\n{age_card}")
                self.bot.send_message(participant, f"üëî –ü—Ä–æ—Ñ–µ—Å—Å–∏—è:\n{job_card}")
                self.bot.send_message(participant, f"üéí –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:\n{baggage_card}")
                self.bot.send_message(participant, f"üé® –•–æ–±–±–∏:\n{hobby_card}")
                self.bot.send_message(participant, f"üìú –§–∞–∫—Ç#1:\n{fact_card_1}")
                self.bot.send_message(participant, f"üìú –§–∞–∫—Ç#2:\n{fact_card_2}")
                if special_card:
                    self.bot.send_message(participant, f"‚ö° –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞:\n{special_card}")
            except Exception as e:
                self.bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫—É {participant}: {str(e)}")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É {participant}: {str(e)}")




# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É
def setup(bot):
    card_manager = CardManager(bot)

    # –ó–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏ –∑–∞—Ä–∞–Ω–µ–µ
    def load_session():
        with open('sessions.json', 'r', encoding='utf-8') as f:
            session_data = json.load(f)
        return session_data

    session_data = load_session()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    @bot.message_handler(commands=['swap_job'])
    def handle_swap_job(message):
        card_manager.send_job_selection(message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("job_"))
    def handle_job_click(call):
        card_manager.handle_job_selection(call)

    @bot.message_handler(commands=['distribute_cards'])
    def handle_distribute_cards(message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "special", —Ç–æ –≤–∫–ª—é—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
        send_special_cards = 'special' in message.text.lower()
        participants = session_data['participants']  # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        card_manager.distribute_cards(message.chat.id, participants, send_special_cards)

