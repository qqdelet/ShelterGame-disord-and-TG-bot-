import telebot
import os
import json
from datetime import datetime
from session import SessionManager,start_session
from cards import setup as setup_cards

with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)
token = config['token']
dev_ids = config['dev_id']

bot = telebot.TeleBot(token)
session_manager = SessionManager(bot)
setup_cards(bot)
start_time = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

@bot.message_handler(commands=['roll'])
def roll_command(message):
    import random
    random_number = random.randint(1, 100)
    bot.reply_to(message, f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {random_number}")

@bot.message_handler(commands=['start_session'])
def start_session_handler(message):
    start_session(bot, message)

@bot.message_handler(commands=['close_session'])
def close_session_handler(message):    
    if session_manager.delete_session():
        bot.reply_to(message, "–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

@bot.message_handler(commands=['vote'])
def vote_command(message):
    session_manager = SessionManager(bot)
    session_manager.start_voting(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("vote_"))
def handle_vote(call):
    session_manager.handle_vote(call)

@bot.callback_query_handler(func=lambda call: call.data in ["participate", "withdraw", "list"])
def handle_session_buttons(call):
    session_manager.handle_session_buttons(call)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
def format_uptime(uptime):
    days = uptime.days
    hours, remainder = divmod(uptime.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    parts = []
    if days > 0:
        parts.append(f"üìÖ –î–Ω–µ–π: {days}")
    if hours > 0:
        parts.append(f"‚è∞ –ß–∞—Å–æ–≤: {hours}")
    if minutes > 0:
        parts.append(f"üïë –ú–∏–Ω—É—Ç: {minutes}")
    if seconds > 0 or not parts:
        parts.append(f"‚è≤Ô∏è –°–µ–∫—É–Ω–¥: {seconds}")

    return "\n".join(parts)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /worktime
@bot.message_handler(commands=['worktime'])
def worktime_command(message):
    if start_time is None:
        bot.reply_to(message, "–ë–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø—É—â–µ–Ω, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    else:
        uptime = datetime.now() - start_time
        formatted_uptime = format_uptime(uptime)
        bot.reply_to(message, f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ:\n{formatted_uptime}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reload
@bot.message_handler(commands=['reload'])
def reload_command(message):
    if message.from_user.id not in dev_ids:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    bot.reply_to(message, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è Telegram-–±–æ—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–≥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ telebot.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping
@bot.message_handler(commands=['ping'])
def ping_command(message):
    bot.reply_to(message, "–ü–æ–Ω–≥! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cls
@bot.message_handler(commands=['cls'])
def cls_command(message):
    if message.from_user.id not in dev_ids:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        os.system('cls' if os.name == 'nt' else 'clear')
        bot.reply_to(message, "–ö–æ–Ω—Å–æ–ª—å –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Å–æ–ª–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def log_message(message):
    chat_name = message.chat.title if message.chat.type != "private" else "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    print(f"[{chat_name}] {message.from_user.first_name}: {message.text}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    start_time = datetime.now()
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    bot.infinity_polling()
